/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.crud.model.impl;

import com.liferay.crud.model.crud;
import com.liferay.crud.model.crudModel;
import com.liferay.crud.model.crudSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the crud service. Represents a row in the &quot;ActualizacionDeDatos_crud&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>crudModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link crudImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see crudImpl
 * @generated
 */
@JSON(strict = true)
public class crudModelImpl extends BaseModelImpl<crud> implements crudModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a crud model instance should use the <code>crud</code> interface instead.
	 */
	public static final String TABLE_NAME = "ActualizacionDeDatos_crud";

	public static final Object[][] TABLE_COLUMNS = {
		{"crudId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"nombre", Types.VARCHAR},
		{"apellido", Types.VARCHAR}, {"edad", Types.VARCHAR},
		{"documento", Types.VARCHAR}, {"tipoDocumento", Types.VARCHAR},
		{"nacimiento", Types.TIMESTAMP}, {"direccion", Types.VARCHAR},
		{"ciudad", Types.VARCHAR}, {"telefonoFijo", Types.VARCHAR},
		{"telefonoCelular", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("crudId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellido", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("edad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipoDocumento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nacimiento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("direccion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ciudad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telefonoFijo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telefonoCelular", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ActualizacionDeDatos_crud (crudId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nombre VARCHAR(40) null,apellido VARCHAR(40) null,edad VARCHAR(2) null,documento VARCHAR(10) null,tipoDocumento VARCHAR(75) null,nacimiento DATE null,direccion VARCHAR(30) null,ciudad VARCHAR(75) null,telefonoFijo VARCHAR(10) null,telefonoCelular VARCHAR(9) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ActualizacionDeDatos_crud";

	public static final String ORDER_BY_JPQL =
		" ORDER BY crud.nombre ASC, crud.apellido ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ActualizacionDeDatos_crud.nombre ASC, ActualizacionDeDatos_crud.apellido ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long APELLIDO_COLUMN_BITMASK = 1L;

	public static final long EDAD_COLUMN_BITMASK = 2L;

	public static final long NOMBRE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static crud toModel(crudSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		crud model = new crudImpl();

		model.setCrudId(soapModel.getCrudId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNombre(soapModel.getNombre());
		model.setApellido(soapModel.getApellido());
		model.setEdad(soapModel.getEdad());
		model.setDocumento(soapModel.getDocumento());
		model.setTipoDocumento(soapModel.getTipoDocumento());
		model.setNacimiento(soapModel.getNacimiento());
		model.setDireccion(soapModel.getDireccion());
		model.setCiudad(soapModel.getCiudad());
		model.setTelefonoFijo(soapModel.getTelefonoFijo());
		model.setTelefonoCelular(soapModel.getTelefonoCelular());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<crud> toModels(crudSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<crud> models = new ArrayList<crud>(soapModels.length);

		for (crudSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public crudModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _crudId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCrudId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _crudId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return crud.class;
	}

	@Override
	public String getModelClassName() {
		return crud.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<crud, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<crud, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<crud, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((crud)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<crud, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<crud, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((crud)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<crud, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<crud, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, crud>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			crud.class.getClassLoader(), crud.class, ModelWrapper.class);

		try {
			Constructor<crud> constructor =
				(Constructor<crud>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<crud, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<crud, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<crud, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<crud, Object>>();
		Map<String, BiConsumer<crud, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<crud, ?>>();

		attributeGetterFunctions.put("crudId", crud::getCrudId);
		attributeSetterBiConsumers.put(
			"crudId", (BiConsumer<crud, Long>)crud::setCrudId);
		attributeGetterFunctions.put("groupId", crud::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<crud, Long>)crud::setGroupId);
		attributeGetterFunctions.put("companyId", crud::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<crud, Long>)crud::setCompanyId);
		attributeGetterFunctions.put("userId", crud::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<crud, Long>)crud::setUserId);
		attributeGetterFunctions.put("userName", crud::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<crud, String>)crud::setUserName);
		attributeGetterFunctions.put("createDate", crud::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<crud, Date>)crud::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", crud::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<crud, Date>)crud::setModifiedDate);
		attributeGetterFunctions.put("nombre", crud::getNombre);
		attributeSetterBiConsumers.put(
			"nombre", (BiConsumer<crud, String>)crud::setNombre);
		attributeGetterFunctions.put("apellido", crud::getApellido);
		attributeSetterBiConsumers.put(
			"apellido", (BiConsumer<crud, String>)crud::setApellido);
		attributeGetterFunctions.put("edad", crud::getEdad);
		attributeSetterBiConsumers.put(
			"edad", (BiConsumer<crud, String>)crud::setEdad);
		attributeGetterFunctions.put("documento", crud::getDocumento);
		attributeSetterBiConsumers.put(
			"documento", (BiConsumer<crud, String>)crud::setDocumento);
		attributeGetterFunctions.put("tipoDocumento", crud::getTipoDocumento);
		attributeSetterBiConsumers.put(
			"tipoDocumento", (BiConsumer<crud, String>)crud::setTipoDocumento);
		attributeGetterFunctions.put("nacimiento", crud::getNacimiento);
		attributeSetterBiConsumers.put(
			"nacimiento", (BiConsumer<crud, Date>)crud::setNacimiento);
		attributeGetterFunctions.put("direccion", crud::getDireccion);
		attributeSetterBiConsumers.put(
			"direccion", (BiConsumer<crud, String>)crud::setDireccion);
		attributeGetterFunctions.put("ciudad", crud::getCiudad);
		attributeSetterBiConsumers.put(
			"ciudad", (BiConsumer<crud, String>)crud::setCiudad);
		attributeGetterFunctions.put("telefonoFijo", crud::getTelefonoFijo);
		attributeSetterBiConsumers.put(
			"telefonoFijo", (BiConsumer<crud, String>)crud::setTelefonoFijo);
		attributeGetterFunctions.put(
			"telefonoCelular", crud::getTelefonoCelular);
		attributeSetterBiConsumers.put(
			"telefonoCelular",
			(BiConsumer<crud, String>)crud::setTelefonoCelular);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCrudId() {
		return _crudId;
	}

	@Override
	public void setCrudId(long crudId) {
		_crudId = crudId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_columnBitmask = -1L;

		if (_originalNombre == null) {
			_originalNombre = _nombre;
		}

		_nombre = nombre;
	}

	public String getOriginalNombre() {
		return GetterUtil.getString(_originalNombre);
	}

	@JSON
	@Override
	public String getApellido() {
		if (_apellido == null) {
			return "";
		}
		else {
			return _apellido;
		}
	}

	@Override
	public void setApellido(String apellido) {
		_columnBitmask = -1L;

		if (_originalApellido == null) {
			_originalApellido = _apellido;
		}

		_apellido = apellido;
	}

	public String getOriginalApellido() {
		return GetterUtil.getString(_originalApellido);
	}

	@JSON
	@Override
	public String getEdad() {
		if (_edad == null) {
			return "";
		}
		else {
			return _edad;
		}
	}

	@Override
	public void setEdad(String edad) {
		_columnBitmask |= EDAD_COLUMN_BITMASK;

		if (_originalEdad == null) {
			_originalEdad = _edad;
		}

		_edad = edad;
	}

	public String getOriginalEdad() {
		return GetterUtil.getString(_originalEdad);
	}

	@JSON
	@Override
	public String getDocumento() {
		if (_documento == null) {
			return "";
		}
		else {
			return _documento;
		}
	}

	@Override
	public void setDocumento(String documento) {
		_documento = documento;
	}

	@JSON
	@Override
	public String getTipoDocumento() {
		if (_tipoDocumento == null) {
			return "";
		}
		else {
			return _tipoDocumento;
		}
	}

	@Override
	public void setTipoDocumento(String tipoDocumento) {
		_tipoDocumento = tipoDocumento;
	}

	@JSON
	@Override
	public Date getNacimiento() {
		return _nacimiento;
	}

	@Override
	public void setNacimiento(Date nacimiento) {
		_nacimiento = nacimiento;
	}

	@JSON
	@Override
	public String getDireccion() {
		if (_direccion == null) {
			return "";
		}
		else {
			return _direccion;
		}
	}

	@Override
	public void setDireccion(String direccion) {
		_direccion = direccion;
	}

	@JSON
	@Override
	public String getCiudad() {
		if (_ciudad == null) {
			return "";
		}
		else {
			return _ciudad;
		}
	}

	@Override
	public void setCiudad(String ciudad) {
		_ciudad = ciudad;
	}

	@JSON
	@Override
	public String getTelefonoFijo() {
		if (_telefonoFijo == null) {
			return "";
		}
		else {
			return _telefonoFijo;
		}
	}

	@Override
	public void setTelefonoFijo(String telefonoFijo) {
		_telefonoFijo = telefonoFijo;
	}

	@JSON
	@Override
	public String getTelefonoCelular() {
		if (_telefonoCelular == null) {
			return "";
		}
		else {
			return _telefonoCelular;
		}
	}

	@Override
	public void setTelefonoCelular(String telefonoCelular) {
		_telefonoCelular = telefonoCelular;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), crud.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public crud toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, crud>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		crudImpl crudImpl = new crudImpl();

		crudImpl.setCrudId(getCrudId());
		crudImpl.setGroupId(getGroupId());
		crudImpl.setCompanyId(getCompanyId());
		crudImpl.setUserId(getUserId());
		crudImpl.setUserName(getUserName());
		crudImpl.setCreateDate(getCreateDate());
		crudImpl.setModifiedDate(getModifiedDate());
		crudImpl.setNombre(getNombre());
		crudImpl.setApellido(getApellido());
		crudImpl.setEdad(getEdad());
		crudImpl.setDocumento(getDocumento());
		crudImpl.setTipoDocumento(getTipoDocumento());
		crudImpl.setNacimiento(getNacimiento());
		crudImpl.setDireccion(getDireccion());
		crudImpl.setCiudad(getCiudad());
		crudImpl.setTelefonoFijo(getTelefonoFijo());
		crudImpl.setTelefonoCelular(getTelefonoCelular());

		crudImpl.resetOriginalValues();

		return crudImpl;
	}

	@Override
	public int compareTo(crud crud) {
		int value = 0;

		value = getNombre().compareTo(crud.getNombre());

		if (value != 0) {
			return value;
		}

		value = getApellido().compareTo(crud.getApellido());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof crud)) {
			return false;
		}

		crud crud = (crud)object;

		long primaryKey = crud.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		crudModelImpl crudModelImpl = this;

		crudModelImpl._setModifiedDate = false;

		crudModelImpl._originalNombre = crudModelImpl._nombre;

		crudModelImpl._originalApellido = crudModelImpl._apellido;

		crudModelImpl._originalEdad = crudModelImpl._edad;

		crudModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<crud> toCacheModel() {
		crudCacheModel crudCacheModel = new crudCacheModel();

		crudCacheModel.crudId = getCrudId();

		crudCacheModel.groupId = getGroupId();

		crudCacheModel.companyId = getCompanyId();

		crudCacheModel.userId = getUserId();

		crudCacheModel.userName = getUserName();

		String userName = crudCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			crudCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			crudCacheModel.createDate = createDate.getTime();
		}
		else {
			crudCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			crudCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			crudCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		crudCacheModel.nombre = getNombre();

		String nombre = crudCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			crudCacheModel.nombre = null;
		}

		crudCacheModel.apellido = getApellido();

		String apellido = crudCacheModel.apellido;

		if ((apellido != null) && (apellido.length() == 0)) {
			crudCacheModel.apellido = null;
		}

		crudCacheModel.edad = getEdad();

		String edad = crudCacheModel.edad;

		if ((edad != null) && (edad.length() == 0)) {
			crudCacheModel.edad = null;
		}

		crudCacheModel.documento = getDocumento();

		String documento = crudCacheModel.documento;

		if ((documento != null) && (documento.length() == 0)) {
			crudCacheModel.documento = null;
		}

		crudCacheModel.tipoDocumento = getTipoDocumento();

		String tipoDocumento = crudCacheModel.tipoDocumento;

		if ((tipoDocumento != null) && (tipoDocumento.length() == 0)) {
			crudCacheModel.tipoDocumento = null;
		}

		Date nacimiento = getNacimiento();

		if (nacimiento != null) {
			crudCacheModel.nacimiento = nacimiento.getTime();
		}
		else {
			crudCacheModel.nacimiento = Long.MIN_VALUE;
		}

		crudCacheModel.direccion = getDireccion();

		String direccion = crudCacheModel.direccion;

		if ((direccion != null) && (direccion.length() == 0)) {
			crudCacheModel.direccion = null;
		}

		crudCacheModel.ciudad = getCiudad();

		String ciudad = crudCacheModel.ciudad;

		if ((ciudad != null) && (ciudad.length() == 0)) {
			crudCacheModel.ciudad = null;
		}

		crudCacheModel.telefonoFijo = getTelefonoFijo();

		String telefonoFijo = crudCacheModel.telefonoFijo;

		if ((telefonoFijo != null) && (telefonoFijo.length() == 0)) {
			crudCacheModel.telefonoFijo = null;
		}

		crudCacheModel.telefonoCelular = getTelefonoCelular();

		String telefonoCelular = crudCacheModel.telefonoCelular;

		if ((telefonoCelular != null) && (telefonoCelular.length() == 0)) {
			crudCacheModel.telefonoCelular = null;
		}

		return crudCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<crud, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<crud, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<crud, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((crud)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<crud, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<crud, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<crud, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((crud)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, crud>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _crudId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nombre;
	private String _originalNombre;
	private String _apellido;
	private String _originalApellido;
	private String _edad;
	private String _originalEdad;
	private String _documento;
	private String _tipoDocumento;
	private Date _nacimiento;
	private String _direccion;
	private String _ciudad;
	private String _telefonoFijo;
	private String _telefonoCelular;
	private long _columnBitmask;
	private crud _escapedModel;

}