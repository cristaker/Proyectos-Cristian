/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cardiff.servicebuilder.model.impl;

import com.cardiff.servicebuilder.model.cardiff;
import com.cardiff.servicebuilder.model.cardiffModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the cardiff service. Represents a row in the &quot;Cardiff_cardiff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>cardiffModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link cardiffImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see cardiffImpl
 * @generated
 */
public class cardiffModelImpl
	extends BaseModelImpl<cardiff> implements cardiffModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cardiff model instance should use the <code>cardiff</code> interface instead.
	 */
	public static final String TABLE_NAME = "Cardiff_cardiff";

	public static final Object[][] TABLE_COLUMNS = {
		{"cardiffId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"defaultLocale", Types.VARCHAR},
		{"taskExecutorClassName", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"backgroundTaskId", Types.BIGINT},
		{"permissionChecker", Types.VARCHAR},
		{"siteDefaultLocale", Types.VARCHAR}, {"status", Types.BIGINT},
		{"themeDisplayLocale", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cardiffId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("defaultLocale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskExecutorClassName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backgroundTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("permissionChecker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteDefaultLocale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("themeDisplayLocale", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Cardiff_cardiff (cardiffId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,defaultLocale VARCHAR(75) null,taskExecutorClassName VARCHAR(75) null,name VARCHAR(75) null,backgroundTaskId LONG,permissionChecker VARCHAR(75) null,siteDefaultLocale VARCHAR(75) null,status LONG,themeDisplayLocale VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Cardiff_cardiff";

	public static final String ORDER_BY_JPQL = " ORDER BY cardiff.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Cardiff_cardiff.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long NAME_COLUMN_BITMASK = 1L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public cardiffModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cardiffId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCardiffId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cardiffId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return cardiff.class;
	}

	@Override
	public String getModelClassName() {
		return cardiff.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<cardiff, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<cardiff, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<cardiff, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((cardiff)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<cardiff, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<cardiff, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(cardiff)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<cardiff, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<cardiff, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, cardiff>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			cardiff.class.getClassLoader(), cardiff.class, ModelWrapper.class);

		try {
			Constructor<cardiff> constructor =
				(Constructor<cardiff>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<cardiff, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<cardiff, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<cardiff, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<cardiff, Object>>();
		Map<String, BiConsumer<cardiff, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<cardiff, ?>>();

		attributeGetterFunctions.put("cardiffId", cardiff::getCardiffId);
		attributeSetterBiConsumers.put(
			"cardiffId", (BiConsumer<cardiff, Long>)cardiff::setCardiffId);
		attributeGetterFunctions.put("groupId", cardiff::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<cardiff, Long>)cardiff::setGroupId);
		attributeGetterFunctions.put("companyId", cardiff::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<cardiff, Long>)cardiff::setCompanyId);
		attributeGetterFunctions.put("userId", cardiff::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<cardiff, Long>)cardiff::setUserId);
		attributeGetterFunctions.put("userName", cardiff::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<cardiff, String>)cardiff::setUserName);
		attributeGetterFunctions.put("createDate", cardiff::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<cardiff, Date>)cardiff::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", cardiff::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<cardiff, Date>)cardiff::setModifiedDate);
		attributeGetterFunctions.put(
			"defaultLocale", cardiff::getDefaultLocale);
		attributeSetterBiConsumers.put(
			"defaultLocale",
			(BiConsumer<cardiff, String>)cardiff::setDefaultLocale);
		attributeGetterFunctions.put(
			"taskExecutorClassName", cardiff::getTaskExecutorClassName);
		attributeSetterBiConsumers.put(
			"taskExecutorClassName",
			(BiConsumer<cardiff, String>)cardiff::setTaskExecutorClassName);
		attributeGetterFunctions.put("name", cardiff::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<cardiff, String>)cardiff::setName);
		attributeGetterFunctions.put(
			"backgroundTaskId", cardiff::getBackgroundTaskId);
		attributeSetterBiConsumers.put(
			"backgroundTaskId",
			(BiConsumer<cardiff, Long>)cardiff::setBackgroundTaskId);
		attributeGetterFunctions.put(
			"permissionChecker", cardiff::getPermissionChecker);
		attributeSetterBiConsumers.put(
			"permissionChecker",
			(BiConsumer<cardiff, String>)cardiff::setPermissionChecker);
		attributeGetterFunctions.put(
			"siteDefaultLocale", cardiff::getSiteDefaultLocale);
		attributeSetterBiConsumers.put(
			"siteDefaultLocale",
			(BiConsumer<cardiff, String>)cardiff::setSiteDefaultLocale);
		attributeGetterFunctions.put("status", cardiff::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<cardiff, Long>)cardiff::setStatus);
		attributeGetterFunctions.put(
			"themeDisplayLocale", cardiff::getThemeDisplayLocale);
		attributeSetterBiConsumers.put(
			"themeDisplayLocale",
			(BiConsumer<cardiff, String>)cardiff::setThemeDisplayLocale);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCardiffId() {
		return _cardiffId;
	}

	@Override
	public void setCardiffId(long cardiffId) {
		_cardiffId = cardiffId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getDefaultLocale() {
		if (_defaultLocale == null) {
			return "";
		}
		else {
			return _defaultLocale;
		}
	}

	@Override
	public void setDefaultLocale(String defaultLocale) {
		_defaultLocale = defaultLocale;
	}

	@Override
	public String getTaskExecutorClassName() {
		if (_taskExecutorClassName == null) {
			return "";
		}
		else {
			return _taskExecutorClassName;
		}
	}

	@Override
	public void setTaskExecutorClassName(String taskExecutorClassName) {
		_taskExecutorClassName = taskExecutorClassName;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public long getBackgroundTaskId() {
		return _backgroundTaskId;
	}

	@Override
	public void setBackgroundTaskId(long backgroundTaskId) {
		_backgroundTaskId = backgroundTaskId;
	}

	@Override
	public String getPermissionChecker() {
		if (_permissionChecker == null) {
			return "";
		}
		else {
			return _permissionChecker;
		}
	}

	@Override
	public void setPermissionChecker(String permissionChecker) {
		_permissionChecker = permissionChecker;
	}

	@Override
	public String getSiteDefaultLocale() {
		if (_siteDefaultLocale == null) {
			return "";
		}
		else {
			return _siteDefaultLocale;
		}
	}

	@Override
	public void setSiteDefaultLocale(String siteDefaultLocale) {
		_siteDefaultLocale = siteDefaultLocale;
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@Override
	public String getThemeDisplayLocale() {
		if (_themeDisplayLocale == null) {
			return "";
		}
		else {
			return _themeDisplayLocale;
		}
	}

	@Override
	public void setThemeDisplayLocale(String themeDisplayLocale) {
		_themeDisplayLocale = themeDisplayLocale;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), cardiff.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public cardiff toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, cardiff>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		cardiffImpl cardiffImpl = new cardiffImpl();

		cardiffImpl.setCardiffId(getCardiffId());
		cardiffImpl.setGroupId(getGroupId());
		cardiffImpl.setCompanyId(getCompanyId());
		cardiffImpl.setUserId(getUserId());
		cardiffImpl.setUserName(getUserName());
		cardiffImpl.setCreateDate(getCreateDate());
		cardiffImpl.setModifiedDate(getModifiedDate());
		cardiffImpl.setDefaultLocale(getDefaultLocale());
		cardiffImpl.setTaskExecutorClassName(getTaskExecutorClassName());
		cardiffImpl.setName(getName());
		cardiffImpl.setBackgroundTaskId(getBackgroundTaskId());
		cardiffImpl.setPermissionChecker(getPermissionChecker());
		cardiffImpl.setSiteDefaultLocale(getSiteDefaultLocale());
		cardiffImpl.setStatus(getStatus());
		cardiffImpl.setThemeDisplayLocale(getThemeDisplayLocale());

		cardiffImpl.resetOriginalValues();

		return cardiffImpl;
	}

	@Override
	public int compareTo(cardiff cardiff) {
		int value = 0;

		value = getName().compareTo(cardiff.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof cardiff)) {
			return false;
		}

		cardiff cardiff = (cardiff)object;

		long primaryKey = cardiff.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		cardiffModelImpl cardiffModelImpl = this;

		cardiffModelImpl._setModifiedDate = false;

		cardiffModelImpl._originalName = cardiffModelImpl._name;

		cardiffModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<cardiff> toCacheModel() {
		cardiffCacheModel cardiffCacheModel = new cardiffCacheModel();

		cardiffCacheModel.cardiffId = getCardiffId();

		cardiffCacheModel.groupId = getGroupId();

		cardiffCacheModel.companyId = getCompanyId();

		cardiffCacheModel.userId = getUserId();

		cardiffCacheModel.userName = getUserName();

		String userName = cardiffCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cardiffCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cardiffCacheModel.createDate = createDate.getTime();
		}
		else {
			cardiffCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cardiffCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cardiffCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cardiffCacheModel.defaultLocale = getDefaultLocale();

		String defaultLocale = cardiffCacheModel.defaultLocale;

		if ((defaultLocale != null) && (defaultLocale.length() == 0)) {
			cardiffCacheModel.defaultLocale = null;
		}

		cardiffCacheModel.taskExecutorClassName = getTaskExecutorClassName();

		String taskExecutorClassName = cardiffCacheModel.taskExecutorClassName;

		if ((taskExecutorClassName != null) &&
			(taskExecutorClassName.length() == 0)) {

			cardiffCacheModel.taskExecutorClassName = null;
		}

		cardiffCacheModel.name = getName();

		String name = cardiffCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			cardiffCacheModel.name = null;
		}

		cardiffCacheModel.backgroundTaskId = getBackgroundTaskId();

		cardiffCacheModel.permissionChecker = getPermissionChecker();

		String permissionChecker = cardiffCacheModel.permissionChecker;

		if ((permissionChecker != null) && (permissionChecker.length() == 0)) {
			cardiffCacheModel.permissionChecker = null;
		}

		cardiffCacheModel.siteDefaultLocale = getSiteDefaultLocale();

		String siteDefaultLocale = cardiffCacheModel.siteDefaultLocale;

		if ((siteDefaultLocale != null) && (siteDefaultLocale.length() == 0)) {
			cardiffCacheModel.siteDefaultLocale = null;
		}

		cardiffCacheModel.status = getStatus();

		cardiffCacheModel.themeDisplayLocale = getThemeDisplayLocale();

		String themeDisplayLocale = cardiffCacheModel.themeDisplayLocale;

		if ((themeDisplayLocale != null) &&
			(themeDisplayLocale.length() == 0)) {

			cardiffCacheModel.themeDisplayLocale = null;
		}

		return cardiffCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<cardiff, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<cardiff, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<cardiff, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((cardiff)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<cardiff, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<cardiff, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<cardiff, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((cardiff)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, cardiff>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _cardiffId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _defaultLocale;
	private String _taskExecutorClassName;
	private String _name;
	private String _originalName;
	private long _backgroundTaskId;
	private String _permissionChecker;
	private String _siteDefaultLocale;
	private long _status;
	private String _themeDisplayLocale;
	private long _columnBitmask;
	private cardiff _escapedModel;

}